--CRIAÇÃO DATABELA DE CARROS

CREATE TABLE TB_CARROS (
    ID_CARRO      NUMBER,
    NOME_CARRO    VARCHAR2(40),
    MARCA_CARRO   VARCHAR2(40),
    VALOR_CARRO   NUMBER,
    ANO_CARRO     NUMBER(4),
    ANO_FAB_CARRO NUMBER(4),
    LOCADO        NUMBER,
    CONSTRAINT PK_ID_CARRO PRIMARY KEY ( ID_CARRO )
);

--CRIAÇÃO DA SEQUENCE DA TABELA DE CARROS

CREATE SEQUENCE S_TB_CARROS;

--CRIAÇÃO DA TRIGGER DO ID AUTOMATICO

CREATE OR REPLACE TRIGGER TRG_TB_CARROS BEFORE
    INSERT ON TB_CARROS
    REFERENCING
        NEW AS NEW
    FOR EACH ROW
BEGIN
    :NEW.ID_CARRO := S_TB_CARROS.NEXTVAL;
END;
/

--CRIAÇÃO DA PROCEDURE QUE INSERE NA TABELA DE CARROS

CREATE OR REPLACE PROCEDURE PRC_TB_CARROS (
    P_OPTION        CHAR,
    P_NOME_CARRO    TB_CARROS.NOME_CARRO%TYPE,
    P_MARCA_CARRO   TB_CARROS.MARCA_CARRO%TYPE,
    P_VALOR_CARRO   TB_CARROS.VALOR_CARRO%TYPE,
    P_ANO_CARRO     TB_CARROS.ANO_CARRO%TYPE,
    P_ANO_FAB_CARRO TB_CARROS.ANO_FAB_CARRO%TYPE,
    P_LOCADO        TB_CARROS.LOCADO%TYPE
) IS
    VERROR EXCEPTION;
BEGIN
    IF P_OPTION = 'I' THEN
        INSERT INTO TB_CARROS VALUES (
            '',
            P_NOME_CARRO,
            P_MARCA_CARRO,
            P_VALOR_CARRO,
            P_ANO_CARRO,
            P_ANO_FAB_CARRO,
            P_LOCADO
        );

    ELSIF P_OPTION = 'D' THEN
        DELETE FROM TB_CARROS
        WHERE
                NOME_CARRO = P_NOME_CARRO
            AND ANO_CARRO = P_ANO_CARRO
            AND ANO_FAB_CARRO = P_ANO_FAB_CARRO;

    ELSIF P_OPTION = 'U' THEN
        UPDATE TB_CARROS
        SET
            NOME_CARRO = P_NOME_CARRO,
            MARCA_CARRO = P_MARCA_CARRO,
            VALOR_CARRO = P_VALOR_CARRO,
            ANO_CARRO = P_ANO_CARRO,
            ANO_FAB_CARRO = P_ANO_FAB_CARRO,
            LOCADO = P_LOCADO;

    ELSE
        RAISE VERROR;
    END IF;
EXCEPTION
    WHEN VERROR THEN
        RAISE_APPLICATION_ERROR(-20000, 'INSIRA SOMENTE I D OU U');
END;
/

--CRIAÇÃO DA TABELA AUDITORIA DE CARROS

CREATE TABLE AUDIT_TB_CARROS
    AS
        SELECT
            *
        FROM
            TB_CARROS;

CREATE OR REPLACE TRIGGER TRG_AUDIT_TB_CARROS AFTER
    INSERT OR DELETE OR UPDATE ON TB_CARROS
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO AUDIT_TB_CARROS VALUES (
            :NEW.ID_CARRO,
            :NEW.NOME_CARRO,
            :NEW.MARCA_CARRO,
            :NEW.VALOR_CARRO,
            :NEW.ANO_CARRO,
            :NEW.ANO_FAB_CARRO,
            :NEW.LOCADO
        );

    ELSIF UPDATING THEN
        INSERT INTO AUDIT_TB_CARROS VALUES (
            :NEW.ID_CARRO,
            :NEW.NOME_CARRO,
            :NEW.MARCA_CARRO,
            :NEW.VALOR_CARRO,
            :NEW.ANO_CARRO,
            :NEW.ANO_FAB_CARRO,
            :NEW.LOCADO
        );

        INSERT INTO AUDIT_TB_CARROS VALUES (
            :OLD.ID_CARRO,
            :OLD.NOME_CARRO,
            :OLD.MARCA_CARRO,
            :OLD.VALOR_CARRO,
            :OLD.ANO_CARRO,
            :OLD.ANO_FAB_CARRO,
            :OLD.LOCADO
        );

    ELSIF DELETING THEN
        INSERT INTO AUDIT_TB_CARROS VALUES (
            :NEW.ID_CARRO,
            :NEW.NOME_CARRO,
            :NEW.MARCA_CARRO,
            :NEW.VALOR_CARRO,
            :NEW.ANO_CARRO,
            :NEW.ANO_FAB_CARRO,
            :NEW.LOCADO
        );

    END IF;
END;
/

--CRIAÇÃO DA TABELA DE ENDERE?S

CREATE TABLE TB_ENDERECO (
ID_ENDERECO NUMBER,
ENDERECO VARCHAR2(100),
CONSTRAINT PK_ID_ENDERECO PRIMARY KEY(ID_ENDERECO)
);

--CRIAÇÃO DA SEQUENCE DA TABELA DE ENDERE?

CREATE SEQUENCE S_TB_ENDERECO
START WITH 1
INCREMENT BY 1
MINVALUE 0;

--CRIAÇÃO DA TRIGGER QUE INSERE O ID AUTOMATICO

CREATE OR REPLACE TRIGGER TRG_TB_ENDERECO
BEFORE INSERT ON TB_ENDERECO
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.ID_ENDERECO := S_TB_ENDERECO.NEXTVAL;
END IF;
END;
/

--CRIAÇÃO DA TABELA DE CLIENTES

CREATE TABLE TB_CLIENTES (
ID_CLIENTE NUMBER,
NOME_CLIENTE VARCHAR2(40),
CPF_CLIENTE VARCHAR(14),
ID_ENDERECO NUMBER,
STATUS CHAR(1),
CONSTRAINT PK_ID_CLIENTE PRIMARY KEY (ID_CLIENTE),
CONSTRAINT FK_ID_ENDERECO FOREIGN KEY (ID_ENDERECO) REFERENCES TB_ENDERECO(ID_ENDERECO)
);

--CRIAÇÃO DA SEQUENCE DA TABELA CLIENTES

CREATE SEQUENCE S_TB_CLIENTES
START WITH 1
INCREMENT BY 1
MINVALUE 0;

--CRIAÇÃO DA TRIGGER QUE INSERE O ID AUTOMATICO NA TABELA DE CLIENTES

CREATE OR REPLACE TRIGGER TRG_TB_CLIENTES
BEFORE INSERT ON TB_CLIENTES
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.ID_CLIENTE := S_TB_CLIENTES.NEXTVAL;
END IF;
END;
/

--CRIAÇÃO DA TABELA DE SEGURO

CREATE TABLE TB_SEGURO (
ID_SEGURO NUMBER,
NUMERO_APOLICE VARCHAR(7),
COBERTURA VARCHAR2(7) CHECK (COBERTURA IN ('PARCIAL', 'TOTAL')),
VALOR_SEGURO NUMBER,
CONSTRAINT PK_ID_SEGURO PRIMARY KEY ( ID_SEGURO ),
CONSTRAINT UK_NUMERO_APOLICE UNIQUE ( NUMERO_APOLICE ) 
);

CREATE SEQUENCE S_TB_SEGURO;

CREATE OR REPLACE TRIGGER TRG_TB_SEGURO
BEFORE INSERT ON TB_SEGURO
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.ID_SEGURO := S_TB_SEGURO.NEXTVAL;
END IF;
END;
/
--CRIAÇÃO DA TABELA DE LOCACAO

CREATE TABLE TB_LOCACAO (
    ID_LOC     NUMBER,
    DATA_LOC   DATE,
    ID_CARRO   NUMBER,
    NOME_CARRO VARCHAR2(40),
    VALOR_LOC  NUMBER(30),
    PERIODO    DATE,
    ID_CLIENTE NUMBER,
    SEGURO VARCHAR(3) CHECK (SEGURO IN ('SIM', 'NAO')),
    ID_SEGURO  NUMBER,
    CONSTRAINT PK_ID_LOC PRIMARY KEY ( ID_LOC ),
    CONSTRAINT FK_ID_CARRO FOREIGN KEY ( ID_CARRO ) REFERENCES TB_CARROS(ID_CARRO),
    CONSTRAINT FK_ID_CLIENTE FOREIGN KEY ( ID_CLIENTE ) REFERENCES TB_CLIENTES ( ID_CLIENTE )
);

--CRIAÇÃO DA SEQUENCE DA TABELA LOCACAO

CREATE SEQUENCE S_TB_LOC;

--CRIAÇÃO DA TRIGGER QUE INSERE O ID AUTOMATICO NA TABELA LOCACAO

CREATE OR REPLACE TRIGGER TRG_TB_LOC BEFORE
    INSERT ON TB_LOCACAO
    FOR EACH ROW
BEGIN
    :NEW.ID_LOC := S_TB_LOC.NEXTVAL;
END;
/

--CRIAÇÃO DA PROCEDURE QUE INSERE NA TABELA LOCACAO

CREATE OR REPLACE PROCEDURE PRC_LOC (
    P_DATA_LOC   TB_LOCACAO.DATA_LOC%TYPE,
    P_ID_CARRO   TB_LOCACAO.ID_CARRO%TYPE,
    P_PERIODO    NUMBER,
    P_ID_CLIENTE TB_LOCACAO.ID_CLIENTE%TYPE,
    P_SEGURO     TB_LOCACAO.SEGURO%TYPE,
    P_ID_SEGURO  TB_LOCACAO.ID_SEGURO%TYPE,
    P_COBERTURA  TB_SEGURO.COBERTURA%TYPE
) IS
    V_EXCEPT EXCEPTION;
    V_EXCEPTION EXCEPTION;
    V_VALID NUMBER;
    V_VAL NUMBER;
    V_ID_SEGURO NUMBER;
    V_RANDOM VARCHAR(7);
    V_NOME_CARRO VARCHAR2(40);
    V_PARCIAL NUMBER;
    V_TOTAL NUMBER;
    V_LOC NUMBER;
    V_DIA_LOC NUMBER;
    V_DATA DATE;
BEGIN

SELECT 'AP'||ROUND(DBMS_RANDOM.VALUE(10000,99999))INTO V_RANDOM FROM DUAL;
    
    SELECT VALOR_CARRO
    INTO V_LOC
    FROM TB_CARROS
    WHERE ID_CARRO = P_ID_CARRO;
    
    V_LOC := V_LOC * 0.15;
    
    V_DIA_LOC := ROUND(SQRT(V_LOC));
    
    V_DATA := SYSDATE + P_PERIODO;
    
    SELECT VALOR_CARRO
    INTO V_PARCIAL
    FROM TB_CARROS
    WHERE ID_CARRO = P_ID_CARRO;


    V_PARCIAL := (V_DIA_LOC * P_PERIODO) * 0.10;

    SELECT VALOR_CARRO
    INTO V_TOTAL
    FROM TB_CARROS
    WHERE ID_CARRO = P_ID_CARRO;


    V_TOTAL := (V_DIA_LOC * P_PERIODO) * 0.20;
    
    
    SELECT COUNT(1)
    INTO V_VALID
    FROM TB_LOCACAO
    WHERE ID_CARRO = P_ID_CARRO;
    
    SELECT STATUS
    INTO V_VAL
    FROM TB_CLIENTES
    WHERE ID_CLIENTE = P_ID_CLIENTE;
    
    SELECT NOME_CARRO
    INTO V_NOME_CARRO
    FROM TB_CARROS
    WHERE ID_CARRO = P_ID_CARRO;
    
IF V_VALID = 0 AND V_VAL = 1 THEN 
    IF P_PERIODO >= 180 THEN

    INSERT INTO TB_SEGURO VALUES(
        '',
        V_RANDOM,
        P_COBERTURA,
        ''
    );
        
        INSERT INTO TB_LOCACAO VALUES(
        '',
        P_DATA_LOC,
        P_ID_CARRO,
        V_NOME_CARRO,
        V_DIA_LOC * P_PERIODO,
        V_DATA,
        P_ID_CLIENTE,
        P_SEGURO,
        P_ID_SEGURO    
    );
        UPDATE TB_CARROS
        SET
        LOCADO = 1
        WHERE
        ID_CARRO = P_ID_CARRO;
        
        
        DBMS_OUTPUT.PUT_LINE('SEGURO '||'GRATIS'||' CONFIRMADO');
    
    ELSE
    
        IF P_SEGURO = 'NAO' THEN
        DBMS_OUTPUT.PUT_LINE('SEU CARRO TA SEM SEGURO AMIGAO');
        
        INSERT INTO TB_LOCACAO VALUES(
        '',
        P_DATA_LOC,
        P_ID_CARRO,
        V_NOME_CARRO,
        V_DIA_LOC * P_PERIODO,
        V_DATA,
        P_ID_CLIENTE,
        P_SEGURO,
        P_ID_SEGURO    
    );
        UPDATE TB_CARROS
        SET
        LOCADO = 1
        WHERE
        ID_CARRO = P_ID_CARRO;
        
        END IF;
        
        IF P_SEGURO = 'SIM' AND P_COBERTURA = 'TOTAL' THEN 
        INSERT INTO TB_SEGURO VALUES(
        '',
        V_RANDOM,
        P_COBERTURA,
        ROUND(V_TOTAL) 
        );
        
        INSERT INTO TB_LOCACAO VALUES(
        '',
        P_DATA_LOC,
        P_ID_CARRO,
        V_NOME_CARRO,
        V_DIA_LOC * P_PERIODO + V_TOTAL,
        V_DATA,
        P_ID_CLIENTE,
        P_SEGURO,
        P_ID_SEGURO    
    );
        
        UPDATE TB_CARROS
        SET
        LOCADO = 1
        WHERE
        ID_CARRO = P_ID_CARRO;
        
        DBMS_OUTPUT.PUT_LINE('SEGURO DE '||'R$'||ROUND(V_TOTAL)||',00'||' CONFIRMADO');
        
        END IF;
        IF P_SEGURO = 'SIM' AND P_COBERTURA = 'PARCIAL' THEN
        INSERT INTO TB_SEGURO VALUES(
        '',
        V_RANDOM,
        P_COBERTURA,
        ROUND(V_PARCIAL *0.10)
    );
        
        INSERT INTO TB_LOCACAO VALUES(
        '',
        P_DATA_LOC,
        P_ID_CARRO,
        V_NOME_CARRO,
        V_DIA_LOC * P_PERIODO + V_PARCIAL,
        V_DATA,
        P_ID_CLIENTE,
        P_SEGURO,
        P_ID_SEGURO    
    );
        UPDATE TB_CARROS
        SET
        LOCADO = 1
        WHERE
        ID_CARRO = P_ID_CARRO;
        
        
        DBMS_OUTPUT.PUT_LINE('SEGURO DE '||'R$'||ROUND(V_PARCIAL)||',00'||' CONFIRMADO');
        
        END IF;
        END IF;
        
END IF;
    IF V_VAL = 0 THEN
        RAISE V_EXCEPT;
    END IF;
    IF V_VALID = 1 THEN
        RAISE V_EXCEPTION;
    END IF;
EXCEPTION
    WHEN V_EXCEPTION THEN
        DBMS_OUTPUT.PUT_LINE ('Esse Carro Ja esta Alugado');
    WHEN V_EXCEPT THEN
        DBMS_OUTPUT.PUT_LINE ('Voce Esta devendo no SPC, E N? podera alugar um carro');
    WHEN NO_DATA_FOUND THEN 
        DBMS_OUTPUT.PUT_LINE ('Voce n? esta cadastrado');  
END;
/